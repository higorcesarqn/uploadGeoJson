// <auto-generated />
using System;
using Database.Npgsql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Api.Migrations
{
    [DbContext(typeof(NpgsqlContext))]
    partial class NpgsqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:pgcrypto", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:postgis", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:tablefunc", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Entities.Geojson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("data_inclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("Now()");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnName("size")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("data_atualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("row")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("row")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.HasKey("Id")
                        .HasName("pk_tb_geojson");

                    b.HasIndex("row")
                        .IsUnique()
                        .HasName("ix_tb_geojson_row");

                    b.ToTable("tb_geojson");
                });

            modelBuilder.Entity("Domain.Entities.Geometria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Area")
                        .HasColumnName("area")
                        .HasColumnType("text");

                    b.Property<string>("AreaDesapropriar")
                        .HasColumnName("area_desapropriar")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("data_inclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("Now()");

                    b.Property<string>("Empreedimento")
                        .HasColumnName("empreendimento")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Localizacao")
                        .HasColumnName("localizacao")
                        .HasColumnType("text");

                    b.Property<string>("Lote")
                        .HasColumnName("lote")
                        .HasColumnType("text");

                    b.Property<string>("NumeroCadastro")
                        .HasColumnName("numero_cadastro")
                        .HasColumnType("text");

                    b.Property<string>("NumeroProcesso")
                        .HasColumnName("numero_processo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("data_atualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("id_geojson")
                        .HasColumnName("id_geojson")
                        .HasColumnType("uuid");

                    b.Property<long>("row")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("row")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.HasKey("Id")
                        .HasName("pk_tb_geometria");

                    b.HasIndex("Empreedimento")
                        .IsUnique()
                        .HasName("index_empreendimento");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("index_id");

                    b.HasIndex("id_geojson")
                        .HasName("ix_tb_geometria_id_geojson");

                    b.HasIndex("row")
                        .IsUnique()
                        .HasName("ix_tb_geometria_row");

                    b.ToTable("tb_geometria");
                });

            modelBuilder.Entity("Domain.Entities.Geometria", b =>
                {
                    b.HasOne("Domain.Entities.Geojson", null)
                        .WithMany("Geometrias")
                        .HasForeignKey("id_geojson")
                        .HasConstraintName("fk_tb_geometria_tb_geojson_id_geojson")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
